version: '3'

services:
  zookeeper:
    image: 'bitnami/zookeeper:3'
    container_name: logProtoProducerZookeeper
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:2'
    container_name: logProtoProducerKafka
    ports:
      - '9092:9092'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  
  mongo:
    image: mongo
    container_name: logProtoProducerMongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: logProtoProducer
      MONGO_NON_ROOT_USERNAME: log
      MONGO_NON_ROOT_PASSWORD: proto
    volumes: 
      - ./data/db:/data/db
      - ./data/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express
    container_name: logProtoProducerMongoExpress
    restart: always
    ports: 
      - 8080:8080
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      VCAP_APP_PORT: 8080

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: logProtoProducerApi
    restart: unless-stopped
    ports:
      - 3001:3001
    environment:
      - PORT=3001
    volumes:
      - .:/api
    depends_on:
      - mongo
    command: node --max-old-space-size=8192 app.js

#  web:
#    build:
#      context: ./web
#      dockerfile: Dockerfile
#    ports:
#      - 3000:3000
#    depends_on: 
#      - api
#    environment:
#      - NODE_ENV=development

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local


